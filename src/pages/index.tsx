import { type NextPage } from "next"
import Head from "next/head"
import { useRouter } from 'next/router'
import { useEffect, useMemo, useState } from 'react'

import { trpc } from "../utils/trpc"

const Home: NextPage = () => {
  const router = useRouter()

  const [school, setSchool] = useState("")
  const schools = trpc.course.schools.useQuery()

  const [type, setType] = useState("")
  const types = trpc.course.types.useQuery({ school })

  const [courseCode, setCourseCode] = useState(0)
  const courses = trpc.course.courses.useQuery({ school, type })

  const [year, setYear] = useState(0)
  const duration = useMemo(() => {
    if (courseCode === 0 || !courses.isSuccess) return []
    const course = courses.data.find((c) => c.code === courseCode) ?? { duration: 0 }
    return Array(course.duration).fill(0)
  }, [courseCode])

  const [curricula, setcurricula] = useState("")
  const curriculas = trpc.course.curricula.useQuery({ code: courseCode }, { enabled: courseCode !== 0 })

  const reset = () => {
    setSchool("")
    setType("")
    setCourseCode(0)
    setYear(0)
    setcurricula("")
  }

  useEffect(() => {
    console.log({ school, type, courseCode, year, curricula })
  }, [school, type, courseCode, year, curricula])

  return (
    <>
      <Head>
        <title>unibo-calendar</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <form>
          <h2>Scuola</h2>
          <select onChange={(e) => setSchool(e.target.value)}>
            <option value="-1">-</option>
            {schools.data?.map((school, idx) => (
              <option key={idx + "sc"}>{school}</option>
            ))}
          </select>
          <h2>Tipologia</h2>
          <select onChange={(e) => setType(e.target.value)}>
            <option value="-1">-</option>
            {types.data?.map((type, idx) => (
              <option key={idx + "type"}>{type}</option>
            ))}
          </select>
          <h2>Corso</h2>
          <select onChange={(e) => setCourseCode(Number(e.target.value))}>
            <option value="-1">-</option>
            {courses.data?.map((course) => (
              <option value={course.code} key={course.code}>{course.code} - {course.description}</option>
            ))}
          </select>
          <h2>Anno</h2>
          <select onChange={(e) => setYear(Number(e.target.value))}>
            <option value="-1">-</option>
            {duration.map((_, idx) => (
              <option key={idx + 1 + "year"}>{idx + 1}</option>
            ))}
          </select>
          <h2>curricula</h2>
          <select onChange={(e) => setcurricula(e.target.value)}>
            <option value="-1">-</option>
            {curriculas.isSuccess ? curriculas.data.map((curricula) => (
              <option value={curricula.value} key={curricula.value}>{curricula.label}</option>
            )) : null}
          </select>
          <div>
            <button type="button" onClick={() =>
              router.push({
                pathname: "/lessons",
                query: {
                  code: courseCode,
                  year,
                  curricula,
                },
              })
            }>Submit</button>
            <button type="button" onClick={reset}>Reset</button>
          </div>
        </form>
      </main>
    </>
  )
}

export default Home
