import { type NextPage } from "next"
import Head from "next/head"
import Link from "next/link"
import { useMemo, useState } from 'react'

import { trpc } from "../utils/trpc"

const Home: NextPage = () => {
  const [school, setSchool] = useState("")
  const schools = trpc.course.schools.useQuery()

  const [type, setType] = useState("")
  const types = trpc.course.types.useQuery({ school })

  const [courseCode, setCourseCode] = useState(0)
  const courses = trpc.course.courses.useQuery({ school, type })

  const [year, setYear] = useState(0)
  const duration = useMemo(() => {
    if (courseCode === 0 || !courses.isSuccess) return []
    const course = courses.data.find((c) => c.code === courseCode) ?? { duration: 0 }
    return Array(course.duration).fill(0)
  }, [courseCode])

  // const [curricola, setCurricola] = useState("")
  // const curricolas = trpc.course.curricola.useQuery({ code: courseCode })

  return (
    <>
      <Head>
        <title>unibo-calendar</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <form>
          <h3>Scuola</h3>
          <select onChange={(e) => setSchool(e.target.value)}>
            <option value="-1">-</option>
            {schools.data?.map((school, idx) => (
              <option key={idx}>{school}</option>
            ))}
          </select>
          <h3>Tipologia</h3>
          <select onChange={(e) => setType(e.target.value)}>
            <option value="-1">-</option>
            {types.data?.map((type, idx) => (
              <option key={idx}>{type}</option>
            ))}
          </select>
          <h3>Corso</h3>
          <select onChange={(e) => setCourseCode(Number(e.target.value))}>
            <option value="-1">-</option>
            {courses.data?.map((course) => (
              <option value={course.code}>{course.description}</option>
            ))}
          </select>
          <h3>Anno</h3>
          <select onChange={(e) => setYear(Number(e.target.value))}>
            <option value="-1">-</option>
            {duration.map((_, idx) => (
              <option>{idx + 1}</option>
            ))}
          </select>
          <h3>Curricola</h3>
          <select>
          </select>
        </form>
      </main>
    </>
  )
}

export default Home

type TechnologyCardProps = {
  name: string
  description: string
  documentation: string
}

const TechnologyCard: React.FC<TechnologyCardProps> = ({
  name,
  description,
  documentation,
}) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <Link
        className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </Link>
    </section>
  )
}
